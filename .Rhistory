model_1 = mean(post_prob_1, na.rm = TRUE),
model_2 = mean(post_prob_2, na.rm = TRUE),
model_3 = mean(post_prob_3, na.rm = TRUE),
.groups = "drop"
) %>%
pivot_longer(cols = starts_with("model_"),
names_to = "model",
values_to = "mean_prob")
post_probs_summary <- post_probs_summary %>%
mutate(
tau_condition = factor(tau_condition, levels = c("(0.2,0.2)", "(0,0.2)|(0.2,0)", "(0,0)"))
)
post_probs_summary <- post_probs_summary %>%
mutate(model = recode(model,
model_1 = "P(M == 1~'|'~Data)",
model_2 = "P(M == 2~'|'~Data)",
model_3 = "P(M == 3~'|'~Data)"))
post_probs_summary <- post_probs_summary %>%
mutate(
model = factor(model, levels = c(
"P(M == 3~'|'~Data)",
"P(M == 2~'|'~Data)",
"P(M == 1~'|'~Data)"
))
)
ggplot(post_probs_summary, aes(x = mean_prob, y = tau_condition, fill = model)) +
geom_col(position = "stack") +
scale_fill_brewer(palette = "Set2", name = NULL,
labels = scales::label_parse()) +
labs(
x = "Mean posterior probability",
y = "Heterogeneity",
) +
theme_minimal() +
theme(legend.position = "bottom")
post_probs_summary <- post_probs_summary %>%
mutate(model = recode(model,
model_1 = "P(M == 1~'|'~Data)",
model_2 = "P(M == 2~'|'~Data)",
model_3 = "P(M == 3~'|'~Data)"))
ggplot(post_probs_summary, aes(x = mean_prob, y = tau_condition, fill = model)) +
geom_col(position = "stack") +
scale_fill_brewer(palette = "Set2", name = NULL,
labels = scales::label_parse()) +
labs(
x = "Mean posterior probability",
y = "Heterogeneity",
) +
theme_minimal() +
theme(legend.position = "bottom")
ggplot(post_probs_summary, aes(x = mean_prob, y = tau_condition, fill = model)) +
geom_col(position = "stack") +
scale_fill_brewer(palette = "Set2", name = NULL,
labels = scales::label_parse(), direction = 1) +
labs(
x = "Mean posterior probability",
y = "Heterogeneity",
) +
theme_minimal() +
theme(legend.position = "bottom")
ggplot(post_probs_summary, aes(x = mean_prob, y = tau_condition, fill = model)) +
geom_col(position = "stack") +
scale_fill_brewer(palette = "Set2", name = NULL,
labels = scales::label_parse(), direction = 2) +
labs(
x = "Mean posterior probability",
y = "Heterogeneity",
) +
theme_minimal() +
theme(legend.position = "bottom")
post_probs_summary <- sim_results %>%
group_by(tau_condition) %>%
summarise(
model_1 = mean(post_prob_1, na.rm = TRUE),
model_2 = mean(post_prob_2, na.rm = TRUE),
model_3 = mean(post_prob_3, na.rm = TRUE),
.groups = "drop"
) %>%
pivot_longer(cols = starts_with("model_"),
names_to = "model",
values_to = "mean_prob")
post_probs_summary <- post_probs_summary %>%
mutate(
tau_condition = factor(tau_condition, levels = c("(0.2,0.2)", "(0,0.2)|(0.2,0)", "(0,0)"))
)
post_probs_summary <- post_probs_summary %>%
mutate(model = recode(model,
model_1 = "P(M == 1~'|'~Data)",
model_2 = "P(M == 2~'|'~Data)",
model_3 = "P(M == 3~'|'~Data)"))
ggplot(post_probs_summary, aes(x = mean_prob, y = tau_condition, fill = model)) +
geom_col(position = "stack") +
scale_fill_brewer(palette = "Set2", name = NULL,
labels = scales::label_parse(), direction = 2) +
labs(
x = "Mean posterior probability",
y = "Heterogeneity",
) +
theme_minimal() +
theme(legend.position = "bottom")
ggplot(post_probs_summary, aes(x = mean_prob, y = tau_condition, fill = model)) +
geom_col(position = "stack") +
scale_fill_brewer(palette = "Set2", name = NULL,
labels = scales::label_parse()) +
labs(
x = "Mean posterior probability",
y = "Heterogeneity",
) +
theme_minimal() +
theme(legend.position = "bottom")
ggplot(post_probs_summary, aes(x = mean_prob, y = tau_condition, fill = model)) +
geom_col(position = "stack") +
scale_fill_brewer(palette = "Set2", name = NULL,
labels = scales::label_parse(), direction = 2) +
labs(
x = "Mean posterior probability",
y = "Heterogeneity",
) +
theme_minimal() +
theme(legend.position = "bottom")
ggplot(post_probs_summary, aes(x = mean_prob, y = tau_condition, fill = model)) +
geom_col(position = "stack") +
scale_fill_brewer(palette = "Set2", name = NULL,
labels = scales::label_parse(), direction = 1) +
labs(
x = "Mean posterior probability",
y = "Heterogeneity",
) +
theme_minimal() +
theme(legend.position = "bottom")
ggplot(post_probs_summary, aes(x = mean_prob, y = tau_condition, fill = model)) +
geom_col(position = "stack") +
scale_fill_brewer(palette = "Set2", name = NULL,
labels = scales::label_parse(), direction = 3) +
labs(
x = "Mean posterior probability",
y = "Heterogeneity",
) +
theme_minimal() +
theme(legend.position = "bottom")
post_probs_summary <- post_probs_summary %>%
mutate(
model = factor(model, levels = c(
"P(M == 3~'|'~Data)",
"P(M == 2~'|'~Data)",
"P(M == 1~'|'~Data)"
))
)
ggplot(post_probs_summary, aes(x = mean_prob, y = tau_condition, fill = model)) +
geom_col(position = "stack") +
scale_fill_brewer(palette = "Set2", name = NULL,
labels = scales::label_parse(), direction = 3) +
labs(
x = "Mean posterior probability",
y = "Heterogeneity",
) +
theme_minimal() +
theme(legend.position = "bottom")
ggplot(post_probs_summary, aes(x = mean_prob, y = tau_condition, fill = model)) +
geom_col(position = "stack") +
scale_fill_brewer(palette = "Set2", name = NULL,
labels = scales::label_parse(), direction = 1) +
labs(
x = "Mean posterior probability",
y = "Heterogeneity",
) +
theme_minimal() +
theme(legend.position = "bottom")
ggplot(post_probs_summary, aes(x = mean_prob, y = tau_condition, fill = model)) +
geom_col(position = "stack") +
scale_fill_brewer(
palette = "Set2",
name = NULL,
labels = c(
"P(M == 1~'|'~Data)" = expression(P(M == 1 ~ "|" ~ Data)),
"P(M == 2~'|'~Data)" = expression(P(M == 2 ~ "|" ~ Data)),
"P(M == 3~'|'~Data)" = expression(P(M == 3 ~ "|" ~ Data))
)
) +
labs(
x = "Mean posterior probability",
y = "Heterogeneity",
) +
theme_minimal() +
theme(legend.position = "bottom")
post_probs_summary <- post_probs_summary %>%
mutate(
model = factor(model, levels = c(
"P(M == 1~'|'~Data)",
"P(M == 2~'|'~Data)",
"P(M == 3~'|'~Data)"
))
)
ggplot(post_probs_summary, aes(x = mean_prob, y = tau_condition, fill = model)) +
geom_col(position = "stack") +
scale_fill_brewer(
palette = "Set2",
name = NULL,
labels = c(
"P(M == 1~'|'~Data)" = expression(P(M == 1 ~ "|" ~ Data)),
"P(M == 2~'|'~Data)" = expression(P(M == 2 ~ "|" ~ Data)),
"P(M == 3~'|'~Data)" = expression(P(M == 3 ~ "|" ~ Data))
)
) +
labs(
x = "Mean posterior probability",
y = "Heterogeneity"
) +
theme_minimal() +
theme(legend.position = "bottom")
post_probs_summary <- post_probs_summary %>%
mutate(
model = factor(model, levels = c(
"P(M == 3~'|'~Data)",
"P(M == 2~'|'~Data)",
"P(M == 1~'|'~Data)"
))
)
ggplot(post_probs_summary, aes(x = mean_prob, y = tau_condition, fill = model)) +
geom_col(position = "stack") +
scale_fill_brewer(palette = "Set2", name = NULL,
labels = scales::label_parse(), direction = 1) +
labs(
x = "Mean posterior probability",
y = "Heterogeneity",
) +
theme_minimal() +
theme(legend.position = "bottom")
ggplot(post_probs_summary, aes(x = mean_prob, y = tau_condition, fill = model)) +
geom_col(position = "stack") +
scale_fill_brewer(palette = "Set2", name = NULL,
labels = scales::label_parse(), direction = 2) +
labs(
x = "Mean posterior probability",
y = "Heterogeneity",
) +
theme_minimal() +
theme(legend.position = "bottom")
ggplot(post_probs_summary, aes(x = mean_prob, y = tau_condition, fill = model)) +
geom_col(position = "stack") +
scale_fill_brewer(palette = "Set2", name = NULL,
labels = scales::label_parse()) +
labs(
x = "Mean posterior probability",
y = "Heterogeneity",
) +
theme_minimal() +
theme(legend.position = "bottom")
# Define levels, labels, and matching colors manually
model_levels <- c(
"P(M == 1~'|'~Data)",
"P(M == 2~'|'~Data)",
"P(M == 3~'|'~Data)"
)
model_labels <- c(
expression(P(M == 1 ~ "|" ~ Data)),
expression(P(M == 2 ~ "|" ~ Data)),
expression(P(M == 3 ~ "|" ~ Data))
)
# Use the same colors as Set2 (manually extracted)
set2_colors <- RColorBrewer::brewer.pal(3, "Set2")
# Apply this setup
post_probs_summary <- post_probs_summary %>%
mutate(model = factor(model, levels = model_levels))
ggplot(post_probs_summary, aes(x = mean_prob, y = tau_condition, fill = model)) +
geom_col(position = "stack") +
scale_fill_manual(
values = setNames(set2_colors, model_levels),
labels = model_labels,
name = NULL
) +
labs(
x = "Mean posterior probability",
y = "Heterogeneity"
) +
theme_minimal() +
theme(legend.position = "bottom")
post_probs_summary <- post_probs_summary %>%
mutate(
model = factor(model, levels = c(
"P(M == 3~'|'~Data)",
"P(M == 2~'|'~Data)",
"P(M == 1~'|'~Data)"
))
)
# Define levels, labels, and matching colors manually
model_levels <- c(
"P(M == 1~'|'~Data)",
"P(M == 2~'|'~Data)",
"P(M == 3~'|'~Data)"
)
model_labels <- c(
expression(P(M == 1 ~ "|" ~ Data)),
expression(P(M == 2 ~ "|" ~ Data)),
expression(P(M == 3 ~ "|" ~ Data))
)
# Use the same colors as Set2 (manually extracted)
set2_colors <- RColorBrewer::brewer.pal(3, "Set2")
ggplot(post_probs_summary, aes(x = mean_prob, y = tau_condition, fill = model)) +
geom_col(position = "stack") +
scale_fill_manual(
values = setNames(set2_colors, model_levels),
labels = model_labels,
name = NULL
) +
labs(
x = "Mean posterior probability",
y = "Heterogeneity tau"
) +
theme_minimal() +
theme(legend.position = "bottom")
?scale_fill_brewer
ggplot(post_probs_summary, aes(x = mean_prob, y = tau_condition, fill = model)) +
geom_col(position = "stack") +
scale_fill_brewer(palette = "Set2", name = NULL,
labels = scales::label_parse(), direction = -1) +
labs(
x = "Mean posterior probability",
y = "Heterogeneity",
) +
theme_minimal() +
theme(legend.position = "bottom")
post_probs_summary <- sim_results %>%
group_by(tau_condition) %>%
summarise(
model_1 = mean(post_prob_1, na.rm = TRUE),
model_2 = mean(post_prob_2, na.rm = TRUE),
model_3 = mean(post_prob_3, na.rm = TRUE),
.groups = "drop"
) %>%
pivot_longer(cols = starts_with("model_"),
names_to = "model",
values_to = "mean_prob")
post_probs_summary <- post_probs_summary %>%
mutate(
tau_condition = factor(tau_condition, levels = c("(0.2,0.2)", "(0,0.2)|(0.2,0)", "(0,0)"))
)
post_probs_summary <- post_probs_summary %>%
mutate(model = recode(model,
model_1 = "P(M == 1~'|'~Data)",
model_2 = "P(M == 2~'|'~Data)",
model_3 = "P(M == 3~'|'~Data)"))
ggplot(post_probs_summary, aes(x = mean_prob, y = tau_condition, fill = model)) +
geom_col(position = "stack") +
scale_fill_brewer(palette = "Set2", name = NULL,
labels = scales::label_parse(), direction = -1) +
labs(
x = "Mean posterior probability",
y = "Heterogeneity",
) +
theme_minimal() +
theme(legend.position = "bottom")
ggplot(post_probs_summary, aes(x = mean_prob, y = tau_condition, fill = model)) +
geom_col(position = "stack") +
scale_fill_brewer(palette = "Set2", name = NULL,
labels = scales::label_parse(), direction = 1) +
labs(
x = "Mean posterior probability",
y = "Heterogeneity",
) +
theme_minimal() +
theme(legend.position = "bottom")
ggplot(post_probs_summary, aes(x = mean_prob, y = tau_condition, fill = model)) +
geom_col(position = "stack") +
scale_fill_brewer(palette = "Set2", name = NULL,
labels = scales::label_parse(), direction = -1) +
labs(
x = "Mean posterior probability",
y = "Heterogeneity",
) +
theme_minimal() +
theme(legend.position = "bottom")
ggplot(post_probs_summary, aes(x = mean_prob, y = tau_condition, fill = model)) +
geom_col(position = "stack") +
scale_fill_brewer(palette = "Set2", name = NULL,
labels = scales::label_parse(), direction = 1) +
labs(
x = "Mean posterior probability",
y = "Heterogeneity",
) +
theme_minimal() +
theme(legend.position = "bottom")
ggplot(post_probs_summary, aes(x = mean_prob, y = tau_condition, fill = model)) +
geom_col(position = "stack") +
scale_fill_brewer(palette = "Set2", name = NULL,
labels = scales::label_parse(), direction = -1) +
labs(
x = "Mean posterior probability",
y = "Heterogeneity",
) +
theme_minimal() +
theme(legend.position = "bottom")
post_probs_summary <- post_probs_summary %>%
mutate(
model = factor(model, levels = c(
"P(M == 3~'|'~Data)",
"P(M == 2~'|'~Data)",
"P(M == 1~'|'~Data)"
))
)
ggplot(post_probs_summary, aes(x = mean_prob, y = tau_condition, fill = model)) +
geom_col(position = "stack") +
scale_fill_brewer(palette = "Set2", name = NULL,
labels = scales::label_parse(), direction = -1) +
labs(
x = "Mean posterior probability",
y = "Heterogeneity",
) +
theme_minimal() +
theme(legend.position = "bottom")
ggplot(post_probs_summary, aes(x = mean_prob, y = tau_condition, fill = model)) +
geom_col(position = "stack") +
scale_fill_brewer(palette = "Set2", name = NULL,
labels = scales::label_parse(), direction = 1) +
labs(
x = "Mean posterior probability",
y = "Heterogeneity",
) +
theme_minimal() +
theme(legend.position = "bottom")
ggplot(post_probs_summary, aes(x = mean_prob, y = tau_condition, fill = model)) +
geom_col(position = "stack") +
scale_fill_brewer(palette = "Set2", name = NULL,
labels = scales::label_parse(), direction = 1) +
labs(
x = "Mean posterior probability",
y = "Heterogeneity",
) +
theme_minimal() +
theme_minimal() +
theme(legend.position = "none") +
annotate("text", x = 0.9, y = 3.0, label = "P(M == 1~'|'~Data)", parse = TRUE, hjust = 0) +
annotate("text", x = 0.9, y = 2.5, label = "P(M == 2~'|'~Data)", parse = TRUE, hjust = 0) +
annotate("text", x = 0.9, y = 2.0, label = "P(M == 3~'|'~Data)", parse = TRUE, hjust = 0)
ggplot(post_probs_summary, aes(x = mean_prob, y = tau_condition, fill = model)) +
geom_col(position = "stack") +
scale_fill_brewer(palette = "Set2", name = NULL,
labels = scales::label_parse(), direction = 1) +
labs(
x = "Mean posterior probability",
y = "Heterogeneity",
) +
theme_minimal() +
theme(legend.position = "top")
ggplot(post_probs_summary, aes(x = mean_prob, y = tau_condition, fill = model)) +
geom_col(position = "stack") +
scale_fill_brewer(palette = "Set2", name = NULL,
labels = scales::label_parse(), direction = 1) +
labs(
x = "Mean posterior probability",
y = "Heterogeneity",
) +
theme_minimal() +
theme(legend.position = "right")
ggplot(post_probs_summary, aes(x = mean_prob, y = tau_condition, fill = model)) +
geom_col(position = "stack") +
scale_fill_brewer(palette = "Set2", name = NULL,
labels = scales::label_parse(), direction = 1) +
labs(
x = "Mean posterior probability",
y = "Heterogeneity",
) +
theme_minimal() +
theme(legend.position = "none")
pdf("post_probs.pdf", width =6, height = 4)
ggplot(post_probs_summary, aes(x = mean_prob, y = tau_condition, fill = model)) +
geom_col(position = "stack") +
scale_fill_brewer(palette = "Set2", name = NULL,
labels = scales::label_parse(), direction = 1) +
labs(
x = "Mean posterior probability",
y = "Heterogeneity",
) +
theme_minimal() +
theme(legend.position = "none")
dev.off()
pdf("tau_estimates.pdf", width = 6, height = 4)
ggplot(tau_data, aes(x = tau_est, fill = true_tau)) +
geom_histogram(position = "identity", alpha = 0.6, bins = 40) +
scale_fill_brewer(palette = "Dark2", name = expression("True " * tau)) +
labs(
x = expression(hat(tau)),
y = "Count" ) +
theme_minimal() + scale_x_continuous(breaks = c(0, 0.1, 0.2, 0.3, 0.4, 0.5)) + expand_limits(x = 0)  # ensure 0 is included
dev.off()
ggplot(post_probs_summary, aes(x = mean_prob, y = tau_condition, fill = model)) +
geom_col(position = "stack") +
scale_fill_brewer(palette = "Set2", name = NULL,
labels = scales::label_parse(), direction = 1) +
labs(
x = "Mean posterior probability",
y = "Heterogeneity",
) +
theme_minimal() +
theme(legend.position = "bottom")
### Visualization of Mixture
df_mix <- sim_mix(300, 2, mu = c(0, 0.5), tau = c(0.2, 0.2), steps = c(0.5, 0.95), weights = c(1, 1, 1), one_sided = TRUE)
hist(df_mix$y)
hist(df_mix$y, breaks = 100)
### Visualization of Mixture
df_mix <- sim_mix(1000, 2, mu = c(0, 0.5), tau = c(0.2, 0.2), steps = c(0.5, 0.95), weights = c(1, 1, 1), one_sided = TRUE)
hist(df_mix$y, breaks = 100)
### Visualization of Mixture
df_mix <- sim_mix(10000, 2, mu = c(0, 0.5), tau = c(0.2, 0.2), steps = c(0.5, 0.95), weights = c(1, 1, 1), one_sided = TRUE)
hist(df_mix$y, breaks = 100)
hist(df_mix$y, breaks = 100, main = "", xlab = "Effect Size")
pdf("Illustrate_Mixing.pdf", width = 6, height = 4)
hist(df_mix$y, breaks = 100, main = "", xlab = "Effect Size")
dev.off()
pdf("illustrate_mixing.pdf", width = 6, height = 4)
hist(df_mix$y, breaks = 100, main = "", xlab = "Effect Size")
dev.off()
