// Generated by rstantools.  Do not edit by hand.

/*
    metamix is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    metamix is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with metamix.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.37.0-rc2-9-g8449bcd
#include <stan/model/model_header.hpp>
namespace model_random_effects_mix_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 45> locations_array__ =
  {" (found before start of program)",
  " (in 'string', line 10, column 2 to column 16)",
  " (in 'string', line 11, column 2 to column 29)",
  " (in 'string', line 12, column 2 to column 19)",
  " (in 'string', line 30, column 2 to column 31)",
  " (in 'string', line 31, column 2 to column 18)",
  " (in 'string', line 33, column 11 to column 12)",
  " (in 'string', line 33, column 4 to column 26)",
  " (in 'string', line 36, column 6 to column 88)",
  " (in 'string', line 35, column 19 to line 37, column 5)",
  " (in 'string', line 35, column 4 to line 37, column 5)",
  " (in 'string', line 40, column 4 to column 43)",
  " (in 'string', line 42, column 4 to column 72)",
  " (in 'string', line 45, column 6 to column 77)",
  " (in 'string', line 44, column 19 to line 46, column 5)",
  " (in 'string', line 44, column 4 to line 46, column 5)",
  " (in 'string', line 32, column 17 to line 47, column 3)",
  " (in 'string', line 32, column 2 to line 47, column 3)",
  " (in 'string', line 16, column 9 to column 10)",
  " (in 'string', line 16, column 2 to column 35)",
  " (in 'string', line 17, column 2 to column 39)",
  " (in 'string', line 18, column 2 to column 42)",
  " (in 'string', line 19, column 2 to column 53)",
  " (in 'string', line 22, column 11 to column 12)",
  " (in 'string', line 22, column 4 to column 30)",
  " (in 'string', line 24, column 8 to column 67)",
  " (in 'string', line 23, column 19 to line 25, column 7)",
  " (in 'string', line 23, column 6 to line 25, column 7)",
  " (in 'string', line 26, column 6 to column 33)",
  " (in 'string', line 21, column 17 to line 27, column 3)",
  " (in 'string', line 21, column 2 to line 27, column 3)",
  " (in 'string', line 2, column 2 to column 17)",
  " (in 'string', line 3, column 9 to column 10)",
  " (in 'string', line 3, column 2 to column 14)",
  " (in 'string', line 4, column 18 to column 19)",
  " (in 'string', line 4, column 2 to column 23)",
  " (in 'string', line 5, column 2 to column 17)",
  " (in 'string', line 6, column 2 to column 22)",
  " (in 'string', line 7, column 2 to column 23)",
  " (in 'string', line 10, column 10 to column 11)",
  " (in 'string', line 11, column 8 to column 9)",
  " (in 'string', line 12, column 10 to column 11)",
  " (in 'string', line 30, column 9 to column 10)",
  " (in 'string', line 30, column 12 to column 13)",
  " (in 'string', line 31, column 9 to column 10)"};
#include <stan_meta_header.hpp>
class model_random_effects_mix final : public model_base_crtp<model_random_effects_mix> {
private:
  int K;
  Eigen::Matrix<double,-1,1> y_data__;
  Eigen::Matrix<double,-1,1> v_data__;
  int M;
  double mu_sd;
  double tau_sd;
  Eigen::Map<Eigen::Matrix<double,-1,1>> y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> v{nullptr, 0};
public:
  ~model_random_effects_mix() {}
  model_random_effects_mix(stan::io::var_context& context__, unsigned int
                           random_seed__ = 0, std::ostream*
                           pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    using local_scalar_t__ = double;
    auto base_rng__ = stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_random_effects_mix_namespace::model_random_effects_mix";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 31;
      context__.validate_dims("data initialization", "K", "int",
        std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      current_statement__ = 31;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 31;
      stan::math::check_greater_or_equal(function__, "K", K, 0);
      current_statement__ = 32;
      stan::math::validate_non_negative_index("y", "K", K);
      current_statement__ = 33;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      y_data__ = Eigen::Matrix<double,-1,1>::Constant(K,
                   std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double,-1,1>>(y_data__.data(), K);
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 33;
        y_flat__ = context__.vals_r("y");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 34;
      stan::math::validate_non_negative_index("v", "K", K);
      current_statement__ = 35;
      context__.validate_dims("data initialization", "v", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      v_data__ = Eigen::Matrix<double,-1,1>::Constant(K,
                   std::numeric_limits<double>::quiet_NaN());
      new (&v) Eigen::Map<Eigen::Matrix<double,-1,1>>(v_data__.data(), K);
      {
        std::vector<local_scalar_t__> v_flat__;
        current_statement__ = 35;
        v_flat__ = context__.vals_r("v");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          stan::model::assign(v, v_flat__[(pos__ - 1)],
            "assigning variable v", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 35;
      stan::math::check_greater_or_equal(function__, "v", v, 0);
      current_statement__ = 36;
      context__.validate_dims("data initialization", "M", "int",
        std::vector<size_t>{});
      M = std::numeric_limits<int>::min();
      current_statement__ = 36;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 36;
      stan::math::check_greater_or_equal(function__, "M", M, 0);
      current_statement__ = 37;
      context__.validate_dims("data initialization", "mu_sd", "double",
        std::vector<size_t>{});
      mu_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 37;
      mu_sd = context__.vals_r("mu_sd")[(1 - 1)];
      current_statement__ = 37;
      stan::math::check_greater_or_equal(function__, "mu_sd", mu_sd, 0);
      current_statement__ = 38;
      context__.validate_dims("data initialization", "tau_sd", "double",
        std::vector<size_t>{});
      tau_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 38;
      tau_sd = context__.vals_r("tau_sd")[(1 - 1)];
      current_statement__ = 38;
      stan::math::check_greater_or_equal(function__, "tau_sd", tau_sd, 0);
      current_statement__ = 39;
      stan::math::validate_non_negative_index("mu", "M", M);
      current_statement__ = 40;
      stan::math::validate_non_negative_index("tau", "M", M);
      current_statement__ = 41;
      stan::math::validate_positive_index("theta", "M", M);
      current_statement__ = 42;
      stan::math::validate_non_negative_index("posterior_probs", "K", K);
      current_statement__ = 43;
      stan::math::validate_non_negative_index("posterior_probs", "M", M);
      current_statement__ = 44;
      stan::math::validate_non_negative_index("y_rep", "K", K);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = M + M + (M - 1);
  }
  inline std::string model_name() const final {
    return "model_random_effects_mix";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.37.0-rc2-9-g8449bcd",
             "stancflags = --allow-undefined"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_random_effects_mix_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      auto mu =
        in__.template read_constrain_ordered<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, M);
      current_statement__ = 2;
      auto tau =
        in__.template read_constrain_lb<std::vector<local_scalar_t__>,
          jacobian__>(0, lp__, M);
      current_statement__ = 3;
      auto theta =
        in__.template read_constrain_simplex<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, M);
      {
        current_statement__ = 18;
        stan::math::validate_non_negative_index("log_theta", "M", M);
        Eigen::Matrix<local_scalar_t__,-1,1> log_theta =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
        current_statement__ = 19;
        stan::model::assign(log_theta, stan::math::log(theta),
          "assigning variable log_theta");
        current_statement__ = 20;
        lp_accum__.add(stan::math::normal_lpdf<false>(mu, 0, mu_sd));
        current_statement__ = 21;
        lp_accum__.add(stan::math::normal_lpdf<false>(tau, 0, tau_sd));
        current_statement__ = 22;
        lp_accum__.add(stan::math::dirichlet_lpdf<false>(theta,
                         stan::math::rep_vector(1, M)));
        current_statement__ = 30;
        for (int i = 1; i <= K; ++i) {
          current_statement__ = 23;
          stan::math::validate_non_negative_index("lps", "M", M);
          Eigen::Matrix<local_scalar_t__,-1,1> lps =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
          current_statement__ = 24;
          stan::model::assign(lps, log_theta, "assigning variable lps");
          current_statement__ = 27;
          for (int m = 1; m <= M; ++m) {
            current_statement__ = 25;
            stan::model::assign(lps,
              (stan::model::rvalue(lps, "lps", stan::model::index_uni(m)) +
              stan::math::normal_lpdf<false>(
                stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                stan::model::rvalue(mu, "mu", stan::model::index_uni(m)),
                stan::math::sqrt(
                  (stan::model::rvalue(v, "v", stan::model::index_uni(i)) +
                  stan::math::pow(
                    stan::model::rvalue(tau, "tau", stan::model::index_uni(m)),
                    2))))), "assigning variable lps",
              stan::model::index_uni(m));
          }
          current_statement__ = 28;
          lp_accum__.add(stan::math::log_sum_exp(lps));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_random_effects_mix_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      auto mu =
        in__.template read_constrain_ordered<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, M);
      current_statement__ = 2;
      auto tau =
        in__.template read_constrain_lb<std::vector<local_scalar_t__>,
          jacobian__>(0, lp__, M);
      current_statement__ = 3;
      auto theta =
        in__.template read_constrain_simplex<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, M);
      {
        current_statement__ = 18;
        stan::math::validate_non_negative_index("log_theta", "M", M);
        Eigen::Matrix<local_scalar_t__,-1,1> log_theta =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
        current_statement__ = 19;
        stan::model::assign(log_theta, stan::math::log(theta),
          "assigning variable log_theta");
        current_statement__ = 20;
        lp_accum__.add(stan::math::normal_lpdf<false>(mu, 0, mu_sd));
        current_statement__ = 21;
        lp_accum__.add(stan::math::normal_lpdf<false>(tau, 0, tau_sd));
        current_statement__ = 22;
        lp_accum__.add(stan::math::dirichlet_lpdf<false>(theta,
                         stan::math::rep_vector(1, M)));
        current_statement__ = 30;
        for (int i = 1; i <= K; ++i) {
          current_statement__ = 23;
          stan::math::validate_non_negative_index("lps", "M", M);
          Eigen::Matrix<local_scalar_t__,-1,1> lps =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
          current_statement__ = 24;
          stan::model::assign(lps, log_theta, "assigning variable lps");
          current_statement__ = 27;
          for (int m = 1; m <= M; ++m) {
            current_statement__ = 25;
            stan::model::assign(lps,
              (stan::model::rvalue(lps, "lps", stan::model::index_uni(m)) +
              stan::math::normal_lpdf<false>(
                stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                stan::model::rvalue(mu, "mu", stan::model::index_uni(m)),
                stan::math::sqrt(
                  (stan::model::rvalue(v, "v", stan::model::index_uni(i)) +
                  stan::math::pow(
                    stan::model::rvalue(tau, "tau", stan::model::index_uni(m)),
                    2))))), "assigning variable lps",
              stan::model::index_uni(m));
          }
          current_statement__ = 28;
          lp_accum__.add(stan::math::log_sum_exp(lps));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "model_random_effects_mix_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      auto mu =
        in__.template read_constrain_ordered<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, M);
      current_statement__ = 2;
      auto tau =
        in__.template read_constrain_lb<std::vector<local_scalar_t__>,
          jacobian__>(0, lp__, M);
      current_statement__ = 3;
      auto theta =
        in__.template read_constrain_simplex<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, M);
      out__.write(mu);
      out__.write(tau);
      out__.write(theta);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,-1> posterior_probs =
        Eigen::Matrix<double,-1,-1>::Constant(K, M,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> y_rep =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 17;
      for (int i = 1; i <= K; ++i) {
        current_statement__ = 6;
        stan::math::validate_non_negative_index("log_weights", "M", M);
        Eigen::Matrix<double,-1,1> log_weights =
          Eigen::Matrix<double,-1,1>::Constant(M,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 10;
        for (int m = 1; m <= M; ++m) {
          current_statement__ = 8;
          stan::model::assign(log_weights,
            (stan::math::log(
               stan::model::rvalue(theta, "theta", stan::model::index_uni(m)))
            +
            stan::math::normal_lpdf<false>(
              stan::model::rvalue(y, "y", stan::model::index_uni(i)),
              stan::model::rvalue(mu, "mu", stan::model::index_uni(m)),
              stan::math::sqrt(
                (stan::model::rvalue(v, "v", stan::model::index_uni(i)) +
                stan::math::pow(
                  stan::model::rvalue(tau, "tau", stan::model::index_uni(m)),
                  2))))), "assigning variable log_weights",
            stan::model::index_uni(m));
        }
        int component = std::numeric_limits<int>::min();
        current_statement__ = 11;
        component = stan::math::categorical_rng(theta, base_rng__);
        current_statement__ = 12;
        stan::model::assign(y_rep,
          stan::math::normal_rng(
            stan::model::rvalue(mu, "mu", stan::model::index_uni(component)),
            stan::math::sqrt(
              (stan::model::rvalue(v, "v", stan::model::index_uni(i)) +
              stan::math::pow(
                stan::model::rvalue(tau, "tau",
                  stan::model::index_uni(component)), 2))), base_rng__),
          "assigning variable y_rep", stan::model::index_uni(i));
        current_statement__ = 15;
        for (int m = 1; m <= M; ++m) {
          current_statement__ = 13;
          stan::model::assign(posterior_probs,
            stan::math::exp(
              (stan::model::rvalue(log_weights, "log_weights",
                 stan::model::index_uni(m)) -
              stan::math::log_sum_exp(log_weights))),
            "assigning variable posterior_probs", stan::model::index_uni(i),
            stan::model::index_uni(m));
        }
      }
      out__.write(posterior_probs);
      out__.write(y_rep);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(mu,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(M),
        "assigning variable mu");
      out__.write_free_ordered(mu);
      std::vector<local_scalar_t__> tau =
        std::vector<local_scalar_t__>(M, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(tau, in__.read<std::vector<local_scalar_t__>>(M),
        "assigning variable tau");
      out__.write_free_lb(0, tau);
      Eigen::Matrix<local_scalar_t__,-1,1> theta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(theta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(M),
        "assigning variable theta");
      out__.write_free_simplex(theta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "mu", "double",
        std::vector<size_t>{static_cast<size_t>(M)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "tau", "double",
        std::vector<size_t>{static_cast<size_t>(M)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "theta", "double",
        std::vector<size_t>{static_cast<size_t>(M)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> mu_flat__;
        current_statement__ = 1;
        mu_flat__ = context__.vals_r("mu");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          stan::model::assign(mu, mu_flat__[(pos__ - 1)],
            "assigning variable mu", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_ordered(mu);
      std::vector<local_scalar_t__> tau =
        std::vector<local_scalar_t__>(M, DUMMY_VAR__);
      current_statement__ = 2;
      tau = context__.vals_r("tau");
      out__.write_free_lb(0, tau);
      Eigen::Matrix<local_scalar_t__,-1,1> theta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> theta_flat__;
        current_statement__ = 3;
        theta_flat__ = context__.vals_r("theta");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          stan::model::assign(theta, theta_flat__[(pos__ - 1)],
            "assigning variable theta", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_simplex(theta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"mu", "tau", "theta"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"posterior_probs", "y_rep"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(M)},
                std::vector<size_t>{static_cast<size_t>(M)},
                std::vector<size_t>{static_cast<size_t>(M)}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(K),
               static_cast<size_t>(M)},
             std::vector<size_t>{static_cast<size_t>(K)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "tau" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "theta" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          param_names__.emplace_back(std::string() + "posterior_probs" + '.'
            + std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_rep" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "tau" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= (M - 1); ++sym1__) {
      param_names__.emplace_back(std::string() + "theta" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          param_names__.emplace_back(std::string() + "posterior_probs" + '.'
            + std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_rep" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"posterior_probs\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"generated_quantities\"},{\"name\":\"y_rep\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((M -1)) + "},\"block\":\"parameters\"},{\"name\":\"posterior_probs\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"generated_quantities\"},{\"name\":\"y_rep\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((M + M) + M);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (((K * M) +
      K));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((M + M) + M);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (((K * M) +
      K));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_random_effects_mix_namespace::model_random_effects_mix;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_random_effects_mix_namespace::profiles__;
}
#endif
#endif
